apiVersion: v1
kind: Service
metadata:
  name: kesclient
  labels:
    app: kesclient
spec:
  type: NodePort
  ports:
    - port: 30002
      targetPort: 30002
      nodePort: 30002
#      protocol: TCP
#      name: http
  selector:
    app: kesclient

#  externalIPs:
#    - 10.152.44.24

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kesclient
  namespace: default
spec:
  replicas: 2 # 声明副本数目
  revisionHistoryLimit: 3 # 保留历史版本
  selector: # 选择器
    matchLabels: # 匹配标签
      app: kesclient
      version: stable
  strategy: # 策略
    rollingUpdate: # 滚动更新
      maxSurge: 30% # 最大额外可以存在的副本数，可以为百分比，也可以为整数
      maxUnavailable: 30% # 示在更新过程中能够进入不可用状态的 Pod 的最大值，可以为百分比，也可以为整数
    type: RollingUpdate # 滚动更新策略
  template: # 模版
    metadata: # 资源的元数据/属性
      annotations: # 自定义注解列表
        sidecar.istio.io/inject: "false" # 自定义注解名字
      labels: # 设定资源的标签
        app: kesclient
        version: stable
    spec: # 资源规范字段
      containers:
        - name: kes-client # 容器的名字
          image: 10.152.44.24:5000/kes-client:v0.1 # 容器使用的镜像地址
          imagePullPolicy: IfNotPresent # 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent
          # Always，每次都检查；Never，每次都不检查（不管本地是否有）；IfNotPresent，如果本地有就不检查，如果没有就拉取
          resources: # 资源管理
            limits: # 最大使用
              cpu: 600m # CPU，1核心 = 1000m
              memory: 500Mi # 内存，1G = 1000Mi
            requests:  # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行
              cpu: 500m
              memory: 300Mi
#          livenessProbe: # pod 内部健康检查的设置
#            httpGet: # 通过httpget检查健康，返回200-399之间，则认为容器正常
#              path: /health # URI地址
#              port: 30002 # 端口
#              scheme: HTTP # 协议
#              # host: 127.0.0.1 # 主机地址
#            initialDelaySeconds: 1 # 表明第一次检测在容器启动后多长时间后开始
#            timeoutSeconds: 5 # 检测的超时时间
#            periodSeconds: 30 # 检查间隔时间
#            successThreshold: 1 # 成功门槛
#            failureThreshold: 5 # 失败门槛，连接失败5次，pod杀掉，重启一个新的pod
#          readinessProbe: # Pod 准备服务健康检查设置
#            httpGet:
#              path: /health
#              port: 30002
#              scheme: HTTP
#            initialDelaySeconds: 1
#            timeoutSeconds: 5
#            periodSeconds: 10
#            successThreshold: 1
#            failureThreshold: 5

          #也可以用这种方法
          #exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常
          #  command:
          #    - cat
          #    - /tmp/health
          #也可以用这种方法
          #tcpSocket: # 通过tcpSocket检查健康
          #  port: number
          ports:
            - name: http # 名称
              containerPort: 30002 # 容器开发对外的端口
#              protocol: TCP # 协议
